#! /usr/bin/env perl

use Language::Learner::Common;
use Mojo::File qw/path/;
use Mojo::Util qw/decode trim/;
use Mojo::UserAgent;
use Mojo::Promise;
my $ua = Mojo::UserAgent->new->max_redirects(5);

use List::MoreUtils qw/pairwise/;

use Spreadsheet::Write;

use Language::Learner::GoogleTranslate;
use Language::Learner::GoogleImages;

use Data::Printer;

#check if cards have been made already
#TODO- implement a flag to skip this check
my $fname = 'cards.csv';
die 'file already exists' if path($fname)->stat;

my @rows;

my %words;

say 'splitting filenames';
my $files = path->list->grep(qr/mp3$/);
my $fnames = $files->map('basename', '.mp3')
   ->map(sub {
     [map { trim $_ } split /-/, $_]
   });

my $pt = $fnames->map(sub { $_->[1] } );
my $en = $fnames->map(sub { $_->[0] } );


say 'spell checking';
#TODO- replace with Text::Aspell
my $gt = Language::Learner::GoogleTranslate->new;
my $corrections = $gt->spell_check(@$pt);
$pt = $pt->map( sub { $corrections->{$_} } );

#TODO- no reason to rename the files, yet, b/c we may have multiple
#suggestions
say 'renaming files';
#$files->each( sub ($item, $index) {
#  rename $item->to_string,
#       $item->sibling("$pt->[$index - 1].mp3")->to_string
#});

my $en_img = Language::Learner::GoogleImages->new(language => 'en');
my $pt_img = Language::Learner::GoogleImages->new(language => 'pt-BR');

my @images_p;
push @images_p, $pt_img->get_images(@$pt);
push @images_p, $en_img->get_images(@$en);

my %images;
Mojo::Promise->all(@images_p)
  ->then( sub { map { $_->[0] } @_ } )
  ->then(sub ($pt_r, $en_r) {
      %images = pairwise { 
        ( $a->{word} => [ map { $_->{results}->@* } $a, $b ] )
      } $pt_r->@*, $en_r->@*;
  })
->wait;

{
  use Mojolicious::Lite;
  use Mojo::IOLoop;
  use Mojo::File qw/path/;
  use Net::EmptyPort qw/empty_port/;
  use File::ShareDir qw/dist_dir/;


  push @{app->static->paths},
    path( dist_dir('Language-Learner') )->child('spa'); 

  get '/' => sub { shift->reply->static('index.html') };

  get '/words' => sub ($c) {
    $c->render( json => [ keys %images ] );
  };

  get '/exit' => sub { 
    Mojo::IOLoop->timer(.5, sub { Mojo::IOLoop->stop })
  };

  get '/img/:word' => sub ($c) {
    $c->render( json => $images{$c->stash('word')} );
  };

  my $base_url = "http://localhost:${\empty_port}";

  #app->log->level('warn');
  app->hook( before_server_start => sub ($server, @) {
    #$server->silent(1);
    system "firefox $base_url > /dev/null 2>&1 &";
  });
  app->start('daemon', '--listen', $base_url, qw/-m production/);
}

die;
say 'generating basic cards';
path->list->grep(qr/mp3$/)
    ->map(qw/basename .mp3/)
    ->map( sub {
        @words{split / /, $_} = 1;
        return $_
      })
    ->map( sub {
      my $word = $_;
      $_ = decode 'UTF-8', $_;
      push @rows, { 
        Spelling => $_, 
        Image => qq(<img src="$images{$word}[0]">),
        Audio => "[sound:$_.mp3]",
      };
      return $word
    });

#TODO- make this configurable on install
my $collection = path(
  '/home/veesh/.local/share/Anki2/Veesh/collection.media/'
);

say 'copying the media';
path->list->map( sub { 
  $_->copy_to( $collection->child($_->basename)->to_string )
});

say 'writing the file';
my $sheet = Spreadsheet::Write->new(file => $fname, csv_options => { binary => 1 });
my @fields = (qw/ Spelling Image Audio Extra/, 'Part of Speech', 'IPA');
$sheet->addrow($_->@{@fields}) for @rows;
$sheet->close;
