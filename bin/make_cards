#! /usr/bin/env perl

use utf8;
use Language::Learner::Common;
use Mojo::File qw/path/;
use Mojo::Util qw/encode decode trim slugify getopt/;
use Mojo::UserAgent;
use Mojo::Promise;
my $ua = Mojo::UserAgent->new->max_redirects(5);

use List::MoreUtils qw/pairwise/;

use Spreadsheet::Write;

use Language::Learner::GoogleTranslate;
use Language::Learner::GoogleImages;

use Data::Printer;

getopt
  'd|dev' => \my $dev,
  'l|logs' => \my $debug
;
#check if cards have been made already
#TODO- implement a flag to skip this check
my $fname = 'cards.csv';
unless ($dev) {
  die 'file already exists' if path($fname)->stat;
}


say 'splitting filenames';
my $files = path->list->grep(qr/mp3$/);
my $fnames = $files->map('basename', '.mp3')
   ->map(sub {
     [map { trim decode 'UTF-8', $_ } split /-/, $_]
   });

my $pt = $fnames->map(sub { $_->[1] } );
my $en = $fnames->map(sub { $_->[0] } );


say 'spell checking';
use Language::Learner::SpellCheck;
my $spell = Language::Learner::SpellCheck->new;
$pt = $pt->map( sub { $spell->check($_) } );

say 'getting images';
my $en_img = Language::Learner::GoogleImages->new(language => 'en');
my $pt_img = Language::Learner::GoogleImages->new(language => 'pt-BR');

my @images_p;
push @images_p, $pt_img->get_images(@$pt);
push @images_p, $en_img->get_images(@$en);

my (%images, %selected);
Mojo::Promise->all(@images_p)
  ->then( sub { map { $_->[0] } @_ } )
  ->then(sub ($pt_r, $en_r) {
      %images = pairwise { 
        ( $a->{word} => [ map { $_->{results}->@* } $a, $b ] )
      } $pt_r->@*, $en_r->@*;
  })
->wait;


#TODO- we wanna get some basic information from wiktionary at this
#point, like a list of ipa basics and such

{
  use Mojolicious::Lite;
  use Mojo::IOLoop;
  use Mojo::File qw/path/;
  use Net::EmptyPort qw/empty_port/;
  use File::ShareDir qw/dist_dir/;
  use Language::Learner::Common;

  my $base_url = "http://localhost:${\($dev ? 9099 : empty_port)}";

  plugin 'SecureCORS';
  app->routes->to({ 'cors.origin' => '*' });
  app->routes->to({'cors.headers' => 'Content-Type, Cache-Control' });


  push @{app->static->paths},
    path( dist_dir('Language-Learner') )->child('spa'); 

  get '/' => sub { shift->reply->static('index.html') };

  get '/words' => sub ($c) {
    $c->render( json => [ keys %images ] );
  };

  unless ($dev) {
    post '/exit' => sub { 
      Mojo::IOLoop->timer(.5, sub { Mojo::IOLoop->stop })
    };
  }

  #TODO- implement retrieval of more images
  #      that means adding a page attribute for the images scraper
  get '/img/:word' => sub ($c) {
    $c->render( json => $images{$c->stash('word')} );
  };

  get '/selection/:word' => sub ($c) {
    $c->render( json => $selected{$c->stash('word')} )
  };

  app->routes->cors('/select/img');
  post '/select/img' => sub ($c) {
    my $args = $c->req->json;
    unless ($args->{word} && exists $args->{selection}) {
      $c->code(400);
      return $c->render(text => 'missing necessary params')
    }
    my $s = $args->{selection};
    $selected{$args->{word}} = $s;
    if ($s) {
      $c->render(text => "Selected $s");
    } else {
      $c->render(text => "Removed selection");
    }
  };


  app->hook( before_server_start => sub ($server, @) {
    system "firefox $base_url > /dev/null 2>&1 &" unless $dev;
  });
  app->start('daemon', '--listen', $base_url, ( $dev || $debug || qw/-m production/ ) );
}


#TODO- take the user's selection, and pwn its z0rz!
# we need to copy it to the anki media directory and crud
my %file_hash = pairwise { ( $a => $b ) } @$pt, @$files;

die 'nothing selected' unless grep $_, keys %selected;

say 'downloading images';
my @image_promises;
for my $word (keys %images) {
  #TODO- implement skipping non-selected words
  #     also allow for deletion of tabs in frontend
  my $src = $images{$word}[$selected{$word}]{src};
  push @image_promises, $ua->get_p($src)
    ->then( sub ($tx) {
      my $res = $tx->res;
      my $type = $res->headers->content_type;
      $type =~ s+image/++;
      $selected{$word} = "ll-$word.$type";
      my $target = encode 'utf-8', $selected{$word};
      $res->save_to($target);
      return $target;
    })->catch(sub { die @_ } );
}

Mojo::Promise->all(@image_promises)->wait;

say 'generating basic cards';
my @rows;
$pt->map( sub {
      push @rows, { 
        Spelling => $_, 
        Image => qq(<img src="$selected{$_}">),
        Audio => "[sound:ll-${\($file_hash{$_}->basename)}]",
      };
      return $_
    });

say 'writing the file';
my $sheet = Spreadsheet::Write->new(file => $fname, csv_options => { binary => 1 });
my @fields = (qw/ Spelling Image Audio Extra/, 'Part of Speech', 'IPA');
$sheet->addrow($_->@{@fields}) for @rows;
$sheet->close;

#TODO- make this configurable on install
my $collection = path(
  '/home/veesh/.local/share/Anki2/Veesh/collection.media/'
);

say 'copying the media';
$files->map( sub { 
  $_->copy_to( $collection->child('ll-' . $_->basename)->to_string )
});

$pt->map( sub {
  my $name = encode 'utf-8', $selected{$_};
  path($name)->copy_to( $collection->child($name)->to_string );
});


